{"version":3,"sources":["componentes/Topbar.jsx","componentes/PokemonCard.jsx","App.js","serviceWorker.js","index.js"],"names":["Topbar","_this$props","this","props","classes","titulo","cor","react_default","a","createElement","className","root","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Component","withStyles","flexGrow","Content","posed","div","closed","height","delay","staggerChildren","delayChildren","open","transition","duration","ease","PokemonCard","state","data","carregarPokemon","_callee","response","nome","foto","skills","type","weight","regenerator_default","wrap","_context","prev","next","console","log","_this","pokemonId","fetch","concat","sent","json","name","charAt","toUpperCase","slice","sprites","front_default","moves","map","item","move","toString","types","setState","stop","_this2","_this$state","Card_default","style","margin","Width","maxWidth","CardHeader_default","avatar","Avatar_default","width","src","title","onClick","pose","index_es","component","React","App","componentes_Topbar","marginTop","id","componentes_PokemonCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77c3ab6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nclass Topbar extends Component {\n  render() {\n    const { classes, titulo, cor } = this.props;return (\n      <div className={classes.root}>\n        <AppBar position=\"fixed\" color={cor}>\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              {titulo}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Topbar);\n\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport posed from \"react-pose\";\nimport { Typography } from '@material-ui/core';\n\n\nconst EaseOne = [0.25, 0.1, 0.25, 1.0];\n\nconst Content = posed.div({\n    closed: { height: 0, delay: 100, staggerChildren: 100, delayChildren: 0 },\n    open: {\n        height: \"auto\",\n        staggerChildren: 1000,\n        delayChildren: 320,\n        transition: {\n            duration: 300,\n            ease: EaseOne\n        }\n    }\n});\n\nclass PokemonCard extends React.Component {\n    state = { open: true }\n    state = {\n        data: []\n    };\n\n\n    componentDidMount() {\n        this.carregarPokemon();\n    }\n\n    carregarPokemon = async () => {\n        console.log(this.props.pokemonId);\n        const response = await fetch(`api/v2/pokemon/${this.props.pokemonId}/`);\n        const data = await response.json();\n        const nome = data.name.charAt(0).toUpperCase() + data.name.slice(1);\n        const foto = data.sprites.front_default;\n        const skills = data.moves.map(item => ' ' + item.move.name).toString();\n        const type = data.types.map(item => ' ' + item.type.name).toString();\n        const weight = data.weight / 10;\n        const height = data.height / 10;\n\n        this.setState({ nome, foto, skills, type, weight, height });\n\n\n    };\n\n    component\n    render() {\n        const { foto, nome, type, skills, weight, height } = this.state;\n        const { open } = this.state;\n\n\n        return (\n            <Card style={{ margin: 15, Width: 275, maxWidth: 275 }}>\n                <CardHeader\n                    avatar={<Avatar style={{ width: 64, height: 64 }} src={foto} />}\n                    title={nome}\n                    onClick={() => this.setState({ open: open === \"closed\" ? false : \"closed\" })}\n                />\n                <Content\n                    className=\"content\"\n                    pose={open === \"closed\" ? \"open\" : \"closed\"}>\n                    <Typography style={{ margin: 12 }}>Type: {type}</Typography>\n                    <Typography style={{ margin: 12 }} variant=\"body2\" component=\"p\">\n                        Weight: {weight}Kg\n                        Height: {height}m\n                    </Typography>\n                    <Typography style={{ margin: 12 }} variant=\"body2\" color=\"textSecondary\" component=\"p\" >Skills: {skills}</Typography >\n                </Content>\n            </Card>\n        )\n    }\n};\n\nexport default PokemonCard;","import React, { Component } from 'react';\nimport Topbar from './componentes/Topbar';\nimport PokemonCard from './componentes/PokemonCard';\n\nconst listaPokemons = () => [1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 88, 100 ,700,345, 500, 501, 502, 700].map(id => \n{return<PokemonCard key={id} pokemonId={id}/>;\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Topbar titulo=\"Pokedex\" cor=\"primary\"/>\n        <div className=\"cards\" style={{marginTop: 72}}>\n        {listaPokemons()}</div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}